/* Generated by Nim Compiler v1.6.8 */
/* Compiled for: Linux, amd64, gcc */
/* Command for C compiler:
   g++ -c -std=gnu++14 -funsigned-char  -w -fmax-errors=3 -fpermissive  -I/home/nick/Projects/nimd/libsimdpp  -I/home/nick/.choosenim/toolchains/nim-1.6.8/lib -I/home/nick/Projects/nimd/src -o /home/nick/Projects/nimd/cache/@mnimd.nim.cpp.o /home/nick/Projects/nimd/cache/@mnimd.nim.cpp */
#define NIM_INTBITS 64

#include "nimbase.h"
#include <simdpp/simd.h>
#include <string.h>
#undef LANGUAGE_C
#undef MIPSEB
#undef MIPSEL
#undef PPC
#undef R3000
#undef R4000
#undef i386
#undef linux
#undef mips
#undef near
#undef far
#undef powerpc
#undef unix
  #  define nimfr_(proc, file) \
      TFrame FR_; \
      FR_.procname = proc; FR_.filename = file; FR_.line = 0; FR_.len = 0; nimFrame(&FR_);

  #  define nimfrs_(proc, file, slots, length) \
      struct {TFrame* prev;NCSTRING procname;NI line;NCSTRING filename; NI len; VarSlot s[slots];} FR_; \
      FR_.procname = proc; FR_.filename = file; FR_.line = 0; FR_.len = length; nimFrame((TFrame*)&FR_);

  #  define nimln_(n, file) \
      FR_.line = n; FR_.filename = file;
  struct NimStringDesc;
struct TGenericSeq;
struct TGenericSeq {
NI len;
NI reserved;
};
struct NimStringDesc : public TGenericSeq {
NIM_CHAR data[SEQ_DECL_SIZE];
};
typedef NimStringDesc* tyArray__nHXaesL0DJZHyVS07ARPRA[1];
typedef NF32 tyArray__9aTCwbdg1cSQimdVd0OEKVw[4];
using namespace simdpp;
static N_INLINE(void, nimZeroMem)(void* p, NI size);
static N_INLINE(void, nimSetMem__systemZmemory_7)(void* a, int v, NI size);
N_LIB_PRIVATE N_NIMCALL(NimStringDesc*, dollar___nimd_1048)(float32<4> x);
static N_INLINE(void, appendString)(NimStringDesc* dest, NimStringDesc* src);
static N_INLINE(void, copyMem__system_1727)(void* dest, void* source, NI size);
static N_INLINE(void, nimCopyMem)(void* dest, void* source, NI size);
N_LIB_PRIVATE N_NIMCALL(NimStringDesc*, dollar___nimd_1053)(tyArray__9aTCwbdg1cSQimdVd0OEKVw x);
N_LIB_PRIVATE N_NIMCALL(void, to_array__nimd_1045)(float32<4> x, tyArray__9aTCwbdg1cSQimdVd0OEKVw Result);
N_LIB_PRIVATE N_NIMCALL(NF32, X5BX5D___nimd_1011)(float32<4> x, NI i);
N_LIB_PRIVATE N_NIMCALL(void, failedAssertImpl__systemZassertions_56)(NimStringDesc* msg);
static N_INLINE(void, nimFrame)(TFrame* s);
N_LIB_PRIVATE N_NOINLINE(void, callDepthLimitReached__system_2993)(void);
static N_INLINE(void, popFrame)(void);
N_LIB_PRIVATE N_NIMCALL(NimStringDesc*, rawNewString)(NI space);
N_LIB_PRIVATE N_NIMCALL(void, echoBinSafe)(NimStringDesc** args, NI argsLen_0);
static N_INLINE(void, initStackBottomWith)(void* locals);
N_LIB_PRIVATE N_NOINLINE(void, nimGC_setStackBottom)(void* theStackBottom);
N_LIB_PRIVATE N_NIMCALL(void, atmdotdotatsdotdotatsdotdotatsdotchoosenimatstoolchainsatsnimminus1dot6dot8atslibatssystemdotnim_DatInit000)(void);
N_LIB_PRIVATE N_NIMCALL(void, atmdotdotatsdotdotatsdotdotatsdotchoosenimatstoolchainsatsnimminus1dot6dot8atslibatssystemdotnim_Init000)(void);
N_LIB_PRIVATE N_NIMCALL(void, NimMainModule)(void);
STRING_LITERAL(TM__ztk9cm29aleE9ahkqiFHbJTSw_2, "float32x4", 9);
STRING_LITERAL(TM__ztk9cm29aleE9ahkqiFHbJTSw_3, "/home/nick/Projects/nimd/src/nimd.nim(354, 10) `0 <= i and i < 4` ", 66);
N_LIB_PRIVATE float32<4> x__nimd_7684;
N_LIB_PRIVATE float32<4> y__nimd_7685;
N_LIB_PRIVATE float32<4> z__nimd_7686;
extern TFrame* framePtr__system_2564;
extern TFrame* framePtr__system_2564;
extern TFrame* framePtr__system_2564;
extern TFrame* framePtr__system_2564;
extern TFrame* framePtr__system_2564;
extern TFrame* framePtr__system_2564;
static N_INLINE(void, nimSetMem__systemZmemory_7)(void* a, int v, NI size) {
	void* T1_ = memset(a, v, ((size_t) (size)));
}
static N_INLINE(void, nimZeroMem)(void* p, NI size) {
	nimSetMem__systemZmemory_7(p, ((int) 0), size);
}
static N_INLINE(void, nimCopyMem)(void* dest, void* source, NI size) {
	void* T1_ = memcpy(dest, source, ((size_t) (size)));
}
static N_INLINE(void, copyMem__system_1727)(void* dest, void* source, NI size) {
	nimCopyMem(dest, source, size);
}
static N_INLINE(void, appendString)(NimStringDesc* dest, NimStringDesc* src) {
	{
		if (!!((src == ((NimStringDesc*) NIM_NIL)))) goto LA3_;
{		copyMem__system_1727(((void*) ((&(*dest).data[(*dest).len]))), ((void*) ((*src).data)), ((NI) ((NI)((*src).len + ((NI) 1)))));
		(*dest).len += (*src).len;
}	}
	LA3_: ;
}
static N_INLINE(void, nimFrame)(TFrame* s) {
	{
		if (!(framePtr__system_2564 == ((TFrame*) NIM_NIL))) goto LA3_;
{		(*s).calldepth = ((NI16) 0);
}	}
	goto LA1_;
	LA3_: ;
	{
		(*s).calldepth = (NI16)((*framePtr__system_2564).calldepth + ((NI16) 1));
	}
	LA1_: ;
	(*s).prev = framePtr__system_2564;
	framePtr__system_2564 = s;
	{
		if (!((*s).calldepth == ((NI16) 2000))) goto LA8_;
{		callDepthLimitReached__system_2993();
}	}
	LA8_: ;
}
static N_INLINE(void, popFrame)(void) {
	framePtr__system_2564 = (*framePtr__system_2564).prev;
}
N_LIB_PRIVATE N_NIMCALL(NF32, X5BX5D___nimd_1011)(float32<4> x, NI i) {
	NF32 result;
	nimfr_("[]", "/home/nick/Projects/nimd/src/nimd.nim");
{	result = (NF32)0;
	nimln_(354, "/home/nick/Projects/nimd/src/nimd.nim");
	{
		NIM_BOOL T3_;
		T3_ = (NIM_BOOL)0;
		T3_ = (((NI) 0) <= ((NI) (i)));
		if (!(T3_)) goto LA4_;
		T3_ = (((NI) (i)) < ((NI) 4));
		LA4_: ;
		if (!!(T3_)) goto LA5_;
{		failedAssertImpl__systemZassertions_56(((NimStringDesc*) &TM__ztk9cm29aleE9ahkqiFHbJTSw_3));
}	}
	LA5_: ;
	nimln_(355, "/home/nick/Projects/nimd/src/nimd.nim");
	{
		if (!(((NI) (i)) == ((NI) 0))) goto LA9_;
{		nimln_(356, "/home/nick/Projects/nimd/src/nimd.nim");
		result = extract<0, 4>(x);
		goto BeforeRet_;
}	}
	goto LA7_;
	LA9_: ;
	{
		nimln_(357, "/home/nick/Projects/nimd/src/nimd.nim");
		if (!(((NI) (i)) == ((NI) 1))) goto LA12_;
{		nimln_(358, "/home/nick/Projects/nimd/src/nimd.nim");
		result = extract<1, 4>(x);
		goto BeforeRet_;
}	}
	goto LA7_;
	LA12_: ;
	{
		nimln_(359, "/home/nick/Projects/nimd/src/nimd.nim");
		if (!(((NI) (i)) == ((NI) 2))) goto LA15_;
{		nimln_(360, "/home/nick/Projects/nimd/src/nimd.nim");
		result = extract<2, 4>(x);
		goto BeforeRet_;
}	}
	goto LA7_;
	LA15_: ;
	{
		nimln_(362, "/home/nick/Projects/nimd/src/nimd.nim");
		result = extract<3, 4>(x);
		goto BeforeRet_;
	}
	LA7_: ;
	}BeforeRet_: ;
	popFrame();
	return result;
}
N_LIB_PRIVATE N_NIMCALL(void, to_array__nimd_1045)(float32<4> x, tyArray__9aTCwbdg1cSQimdVd0OEKVw Result) {
	nimfr_("to_array", "/home/nick/Projects/nimd/src/nimd.nim");
	nimln_(364, "/home/nick/Projects/nimd/src/nimd.nim");
	Result[0] = X5BX5D___nimd_1011(x, ((NI) 0));
	Result[1] = X5BX5D___nimd_1011(x, ((NI) 1));
	Result[2] = X5BX5D___nimd_1011(x, ((NI) 2));
	Result[3] = X5BX5D___nimd_1011(x, ((NI) 3));
	popFrame();
}
N_LIB_PRIVATE N_NIMCALL(NimStringDesc*, dollar___nimd_1048)(float32<4> x) {
	NimStringDesc* result;
	NimStringDesc* T1_;
	tyArray__9aTCwbdg1cSQimdVd0OEKVw T2_;
	nimfr_("$", "/home/nick/Projects/nimd/src/nimd.nim");
	result = NIM_NIL;
	nimln_(365, "/home/nick/Projects/nimd/src/nimd.nim");
	T1_ = NIM_NIL;
	nimZeroMem((void*)T2_, sizeof(tyArray__9aTCwbdg1cSQimdVd0OEKVw));
	to_array__nimd_1045(x, T2_);
	NimStringDesc* T3_ = dollar___nimd_1053(T2_);
	T1_ = rawNewString((T3_ ? T3_->len : 0) + 9);
appendString(T1_, ((NimStringDesc*) &TM__ztk9cm29aleE9ahkqiFHbJTSw_2));
appendString(T1_, T3_);
	result = T1_;
	popFrame();
	return result;
}
static N_INLINE(void, initStackBottomWith)(void* locals) {
	nimGC_setStackBottom(locals);
}

N_LIB_PRIVATE void PreMainInner(void) {
}

N_LIB_PRIVATE int cmdCount;
N_LIB_PRIVATE char** cmdLine;
N_LIB_PRIVATE char** gEnv;
N_LIB_PRIVATE void PreMain(void) {
	void (*volatile inner)(void);
	inner = PreMainInner;
	atmdotdotatsdotdotatsdotdotatsdotchoosenimatstoolchainsatsnimminus1dot6dot8atslibatssystemdotnim_DatInit000();
	initStackBottomWith((void *)&inner);
	atmdotdotatsdotdotatsdotdotatsdotchoosenimatstoolchainsatsnimminus1dot6dot8atslibatssystemdotnim_Init000();
	(*inner)();
}

N_LIB_PRIVATE N_CDECL(void, NimMainInner)(void) {
	NimMainModule();
}

N_CDECL(void, NimMain)(void) {
	void (*volatile inner)(void);
	PreMain();
	inner = NimMainInner;
	initStackBottomWith((void *)&inner);
	(*inner)();
}

int main(int argc, char** args, char** env) {
	cmdLine = args;
	cmdCount = argc;
	gEnv = env;
	NimMain();
	return nim_program_result;
}

N_LIB_PRIVATE N_NIMCALL(void, NimMainModule)(void) {
{
	tyArray__nHXaesL0DJZHyVS07ARPRA T1_;
	tyArray__nHXaesL0DJZHyVS07ARPRA T2_;
	tyArray__nHXaesL0DJZHyVS07ARPRA T3_;
	nimfr_("nimd", "/home/nick/Projects/nimd/src/nimd.nim");
	nimln_(3234, "/home/nick/Projects/nimd/src/nimd.nim");
	x__nimd_7684 = make_float<float32<4>>(1.0f, 2.0f, 3.0f, 4.0f);
	nimln_(3235, "/home/nick/Projects/nimd/src/nimd.nim");
	y__nimd_7685 = make_float<float32<4>>(4.0f, 3.0f, 2.0f, 1.0f);
	nimln_(3236, "/home/nick/Projects/nimd/src/nimd.nim");
	z__nimd_7686 = div(mul(x__nimd_7684, y__nimd_7685), x__nimd_7684);
	nimln_(3238, "/home/nick/Projects/nimd/src/nimd.nim");
	nimZeroMem((void*)T1_, sizeof(tyArray__nHXaesL0DJZHyVS07ARPRA));
	T1_[0] = dollar___nimd_1048(z__nimd_7686);
	echoBinSafe(T1_, 1);
	nimln_(3239, "/home/nick/Projects/nimd/src/nimd.nim");
	nimZeroMem((void*)T2_, sizeof(tyArray__nHXaesL0DJZHyVS07ARPRA));
	T2_[0] = dollar___nimd_1048(x__nimd_7684);
	echoBinSafe(T2_, 1);
	nimln_(3240, "/home/nick/Projects/nimd/src/nimd.nim");
	nimZeroMem((void*)T3_, sizeof(tyArray__nHXaesL0DJZHyVS07ARPRA));
	T3_[0] = dollar___nimd_1048(min(y__nimd_7685, x__nimd_7684));
	echoBinSafe(T3_, 1);
	popFrame();
}
}

